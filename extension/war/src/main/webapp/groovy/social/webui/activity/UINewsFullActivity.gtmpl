<!-- Full details news Activity -->
<%
  import org.apache.commons.lang.ArrayUtils;
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.webui.form.UIFormTextAreaInput;
  import org.exoplatform.social.core.service.LinkProvider;
  import org.exoplatform.social.core.space.model.Space;
  import org.exoplatform.social.webui.Utils;
  
  import java.time.format.DateTimeFormatter;
  import java.time.LocalDateTime;
  import java.util.TimeZone;

  import org.apache.commons.lang.StringEscapeUtils;
  import org.apache.commons.lang.StringUtils
  
  import java.util.Date;

  import static org.exoplatform.social.webui.activity.BaseUIActivity.TEMPLATE_PARAM_COMMENT;
 
  def mediumDateFormat = DateTimeFormatter.ofPattern("d MMM yyyy");

  def pcontext = Util.getPortalRequestContext();
  def labelActivityHasBeenDeleted = _ctx.appRes("UIActivity.label.Activity_Has_Been_Deleted");
  def activity = uicomponent.getActivity();
  def activityCommentAndLikable = uicomponent.isActivityCommentAndLikable();
  def streamOwner = activity.getStreamOwner();
  def posetdDate = new Date(activity.postedTime);
  def ldt = LocalDateTime.ofInstant(posetdDate.toInstant(),TimeZone.getDefault().toZoneId());
  def postedActivityDate = ldt.format(mediumDateFormat);
  
  
%>

<% if (activity) { //process if not null

  def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");

  def labelComment = _ctx.appRes("UIActivity.label.Comment");
  def labelCancel = _ctx.appRes("UIActivity.label.Cancel");
  def labelLike = _ctx.appRes("UIActivity.label.Like");
  def labelUpdate = _ctx.appRes("UIActivity.label.Update");
  def labelEdit = _ctx.appRes("UIActivity.label.Edit");
  def labelDelete = _ctx.appRes("UIActivity.label.Delete");
  def labelViewAllReplies = _ctx.appRes("UIActivity.label.ViewAllReplies");
  def labelUnlike = _ctx.appRes("UIActivity.label.Unlike");
  def labelSource = _ctx.appRes("UIActivity.label.Source");
  def inputWriteAComment = _ctx.appRes("UIActivity.input.Add_your_comment").replace("'", "\\'");
  def labelShowAllComments = _ctx.appRes("UIActivity.label.Show_All_Comments");
  def labelHideAllComments = _ctx.appRes("UIActivity.label.Hide_All_Comments");
  def labelShowPreviousComments = _ctx.appRes("UIActivity.label.Show_Previous_Comments");

  def labelReadMore = _ctx.appRes("UIActivity.label.ReadMore");

  def labelWrittenBy = _ctx.appRes("UIActivity.label.writtenBy");
  def labelPublicationDate = _ctx.appRes("UIActivity.label.publicationDate");
  
  def labelOnePersonLikeThis=_ctx.appRes("UIActivity.label.One_Person_Like_This");
  def labelTwoPersonLikeThis=_ctx.appRes("UIActivity.label.Two_Person_Like_This");
  def labelOneAndOthersLikeThis=_ctx.appRes("UIActivity.label.One_And_Others_Like_This");
  def labelYouLikeThis=_ctx.appRes("UIActivity.label.You_Like_This");
  def labelYouAndOnePersonLikeThis=_ctx.appRes("UIActivity.label.You_And_One_Person_Like_This");
  def labelYouAndOthersLikeThis=_ctx.appRes("UIActivity.label.You_And_Others_Like_This");

  def captionConfirmation=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirmation"));
  def labelToDeleteThisActivity=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Activity"));
  def labelConfirmbutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirm_Delete_Activity-Button"));
  def labelClosebutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Cancel_Delete_Activity-Button"));
  def labelToDeleteThisComment=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Comment"));

  def likeActivityAction = uicomponent.event("LikeActivity", "true");
  def unlikeActivityAction = uicomponent.event("LikeActivity", "false");


  def commentList = uicomponent.getComments();
  int allCommentSize = uicomponent.getAllCommentSize();
  if (allCommentSize > 0) {
    labelShowAllComments = labelShowAllComments.replace("{0}", allCommentSize + "");
    labelHideAllComments = labelHideAllComments.replace("{0}", allCommentSize + "");

  }

  def parentCommentsSize = uicomponent.getParentCommentsSize(commentList);
  def commentsHidden = allCommentSize-parentCommentsSize;
  def displayedIdentityLikes = uicomponent.getDisplayedIdentityLikes();
  def identityLikesNum = 0;
  def totalLikesNum = uicomponent.getIdentityLikes().length;
  def labelLikes = null;
  def loadLikesAction = uicomponent.event("LoadLikes");
  if (displayedIdentityLikes != null) {
    identityLikesNum = displayedIdentityLikes.length;
  }

  def commentListStatus = uicomponent.getCommentListStatus();
  def commentFormDisplayed = uicomponent.isCommentFormDisplayed();
  def likesDisplayed = uicomponent.isAllLoaded();
  def spaceURL = uicomponent.getSpaceURL();
  def spaceGroupId = uicomponent.getSpaceGroupId();
  
 
  def activityLink = uicomponent.getActivityPermalink(activity.id);
  def summary = activity.templateParams.summary;
  def illustrationFileId= Utils.getActivityManager().getActivityFilesIds(activity).stream()
                                       .findAny().orElse(null);
   StringBuffer illustrationURL = new StringBuffer();
   if(StringUtils.isBlank(illustrationFileId)){
       illustrationURL.append("/eXoSkin/skin/images/system/newsImageDefault.png");
   }
   else {
       illustrationURL.append("/rest/v1/social/spaces/")
       .append(activity.id).append("/files/")
       .append(illustrationFileId);
   }

  def placeholder = _ctx.appRes("UIActivity.comment.placeholder").replace("'", "\\'");

  // labels
  def LikePopupTitleLabel = _ctx.appRes("UIActivity.title.PopupCommentLikers");
  def IgnoreLabel = _ctx.appRes("UserProfilePopup.label.Ignore");
  def ConnectLabel = _ctx.appRes("UserProfilePopup.label.Connect");
  def ConfirmLabel = _ctx.appRes("UserProfilePopup.label.Confirm");
  def CancelRequestLabel = _ctx.appRes("UserProfilePopup.label.CancelRequest");
  def RemoveConnectionLabel = _ctx.appRes("UserProfilePopup.label.RemoveConnection");
  def labels = """ {
    LikePopupTitle: '$LikePopupTitleLabel',
    Connect: '$ConnectLabel',
    Confirm: '$ConfirmLabel',
    CancelRequest: '$CancelRequestLabel',
    RemoveConnection: '$RemoveConnectionLabel',
    Ignore: '$IgnoreLabel'
  }"""

  //params for init UIActivity javascript object
  def params = """ {
    activityId: '${activity.id}',
    placeholderComment: '${placeholder}',
    inputWriteAComment: '$inputWriteAComment',
    commentMinCharactersAllowed: '${uicomponent.getCommentMinCharactersAllowed()}',
    commentMaxCharactersAllowed: '${uicomponent.getCommentMaxCharactersAllowed()}',
    commentFormDisplayed: '$commentFormDisplayed',
    spaceURL:'$spaceURL',
    spaceGroupId: '$spaceGroupId',
    allCommentSize: '${allCommentSize}',
    commentFormFocused: '${uicomponent.isCommentFormFocused()}',
    labels: $labels
  } """

  jsManager.require("SHARED/jquery", "jq")
           .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
           .require("SHARED/social-ui-activity", "activity").addScripts("activity.onLoad($params);");

  //make sures commentFormFocused is set to false to prevent any refresh to focus, only focus after post a comment
  uicomponent.setCommentFormFocused(false);
  def ownerName, ownerUri = "#", ownerAvatar, activityPostedTime, activityPostedTimeInSpace, activityUpdatedTime;
  def listPeopleLikeBlockClass = "", listPeopleBGClass = "";

  if (!likesDisplayed) {
    listPeopleLikeBlockClass = "displayNone";
  }

  if (uicomponent.isLiked()) {
    if (totalLikesNum > 2) {
      labelLikes = labelYouAndOthersLikeThis.replace("{0}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 2) {
      def likeId = (displayedIdentityLikes[0] == Utils.getViewerIdentity().getId()) ? displayedIdentityLikes[1] : displayedIdentityLikes[0];
      def id = Utils.getIdentityManager().getIdentity(likeId);
      labelLikes = labelYouAndOnePersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName));
    } else {
      labelLikes = labelYouLikeThis;
    }
  } else {
    if (totalLikesNum > 2) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOneAndOthersLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName)).replace("{1}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 1) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOnePersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName));
    } else if (totalLikesNum == 2) {
      def id1 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      def id2 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[1]);
      labelLikes = labelTwoPersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id1.profile.fullName)).replace("{1}", StringEscapeUtils.escapeHtml(id2.profile.fullName));
    }
  }

  if (!labelLikes) {
   //hides diplayPeopleBG
   listPeopleBGClass = "displayNone";
  }

  activityPostedTime = uicomponent.getPostedTimeString(_ctx, activity.postedTime);
  def postedTimeTooltip = _ctx.appRes("UIActivity.label.PostedFrom").replace("{0}",activityPostedTime);
  activityUpdatedTime =uicomponent.getPostedTimeString(_ctx,activity.updated.getTime());
  activityUpdatedTime = _ctx.appRes("UIActivity.label.EditedFrom").replace("{0}",activityUpdatedTime);
  def spaceID;
  def ownerIdentity = uicomponent.ownerIdentity;
  if (uicomponent.isUserActivity()) {
    ownerUri = LinkProvider.getUserProfileUri(ownerIdentity.getRemoteId());
    ownerAvatar = ownerIdentity.profile.avatarUrl;
    ownerName = StringEscapeUtils.escapeHtml(ownerIdentity.profile.fullName);
    if (!ownerAvatar) ownerAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
  } else if(uicomponent.isSpaceActivity()){
    Space space = Utils.getSpaceService().getSpaceByPrettyName(ownerIdentity.remoteId);
    ownerUri = Utils.getSpaceHomeURL(space);
    ownerAvatar = space.avatarUrl;
    ownerName = space.displayName;
    if (!ownerAvatar) ownerAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
  } else {
    ownerUri = ownerIdentity.profile.url;
    ownerAvatar = ownerIdentity.profile.avatarUrl;
    ownerName = StringEscapeUtils.escapeHtml(ownerIdentity.profile.fullName);
  }
  def currentTime = System.currentTimeMillis();
  String viewActivityTip = _ctx.appRes("UIActivity.msg.ViewActivity");
  def deleteActivityTip = _ctx.appRes("UIActivity.msg.DeleteActivity");

  def spaceSourceURI, spaceName, spaceImageSource;
  if (uicomponent.isUserActivity() && uicomponent.isSpaceStreamOwner() && !uicomponent.isUISpaceActivitiesDisplay()) {
          Space spaceSource = Utils.getSpaceService().getSpaceByPrettyName(streamOwner);
          spaceID = spaceSource.getId();
          if (spaceSource != null) {
            spaceSourceURI = LinkProvider.getSpaceUri(spaceSource.url);
             spaceName = spaceSource.displayName;
          spaceImageSource = spaceSource.getAvatarUrl();
          if (spaceImageSource == null) {
            spaceImageSource = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
          }
            } else {
                spaceSourceURI = LinkProvider.getActivityUriForSpace(streamOwner, streamOwner);
                spaceName = StringEscapeUtils.escapeHtml(Utils.getSpaceIdentity(streamOwner, false).profile.fullName);
              spaceImageSource = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
            }
   }
  def viewerId = Utils.getViewerIdentity().getId();

  def activityBody = activity.body; 
%>

<div class="activityStream uiNewsActivity" id="activityContainer${activity.id}">
  <% uiform.begin() %>
  <div class="boxContainer" id="boxContainer">
  <div id="ContextBox${activity.id}" class="uiBox contentBox">
    <div id="ActivityContextBox${activity.id}">
      <div class="description">
                <img src="$illustrationURL" class="newsImage" alt="News" style="width:165px; height: 150px;"/>
                <div class="newsDetails" style="padding-left:18%; ">
                    <div class="newsTitle">
                        <a href="$activityLink" style="color:#578dc9;">$activity.title</a>
                    </div>
                    <div>
                        <span>
                          <span style="font-style: italic;">${labelWrittenBy}</span>
                          <span style="font-weight:bold;"> $ownerName</span>
                           <span style="">   ---   </span>
                           <span style="font-style: italic;"> ${labelPublicationDate}</span>
                           <span style="font-weight:bold;"> $postedActivityDate</span>
                        </span>
                    </div>
                      <% if (summary != null) { %>
                    <div style="margin-top: 1%;height: 74px;padding: 1%;text-align: justify; width:90%; border: 1px solid #ccc !important;cursor: auto;overflow: auto;">
                        <span>$summary</span>
                    </div>
                      <% } %>
                 
                </div>
                 <div class="newsBody" style="border: 2px solid #ccc !important;margin-top: 2%;padding: 1%;text-align: justify; width: 91%;height: 300px;cursor: auto;overflow: auto;">
                        $activityBody
                  </div>
            <div class="newsRibbon"></div>
      </div>
    </div><!--end #ActivityContextBox${activity.id}-->
  </div> <!--end ContextBox${activity.id}-->
  </div> <!-- #boxContainer-->
  <% uiform.end() %>
</div><!--activityStream-->
<% } else { %> <!-- activity deleted -->
<% uiform.begin() %>
<div class="activityStream deleted">$labelActivityHasBeenDeleted</div>
<% uiform.end() %>
<% } %>